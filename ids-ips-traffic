# Intrusion DataModel Search

Pipe the summary data from every IDS and IPS event from your security logs into a risk index with an equal score of "1". You can always adjust the score dynamically using eval statements like:

## Search String

| tstats `summariesonly` count from datamodel=Intrusion_Detection.IDS_Attacks where NOT IDS_Attacks.src=unknown NOT IDS_Attacks.src=0.0.0.0 by IDS_Attacks.src,IDS_Attacks.dest,IDS_Attacks.action,IDS_Attacks.dvc,IDS_Attacks.severity,sourcetype,index | `drop_dm_object_name("IDS_Attacks")`
| eval risk_score=case(match(severity,"formational") AND match(action, "llowed"), "5",match(severity,"ow") AND match(action, "llowed"), "25", match(severity,"edium") AND match(action, "llowed"), "50", match(severity,"igh") AND match(action, "llowed"), "75", match(severity,"ritical") AND match(action, "llowed"), "100", 1==1, "1")
| eval risk_object='src'
| eval risk_object_type="system"
| eval savedsearch_description="intrusion sensor behavior"
| table src,dest,app,action,severity,dvc,sourcetype,index,risk_*,savedsearch_description
| collect index=risk

### Case statement reasoning
this will help avoid issues with lower and upper values of the same severity and action. 

## Schedule
Scheduled(never real time)

cron
*/2,*,*,*,*

duration
earliest: -4m@m, latest: -2m@m

### Schedule reasoning
this puts the schedule on a regular but limited window to help with performance while capturing every event.

## Throttling
src,dest,app,action,severity,dvc,sourcetype,index for 5 minutes

### Throttling reasoining
remove the duplicates completely
